---
---

<div class="terminal-container">
  <div id="terminal" class="terminal"></div>
  <div class="controls">
    <button id="connectBtn" class="connect-btn">üîå Connect to Arduino</button>
    <button id="disconnectBtn" class="disconnect-btn" disabled>üîå Disconnect</button>
  </div>
</div>

<style>
  .terminal-container {
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    border: 1px solid #333;
    border-radius: 8px;
    overflow: hidden;
    background: #000;
  }

  .terminal {
    width: 100%;
    height: 400px;
    padding: 10px;
  }

  .controls {
    padding: 10px;
    background: #1a1a1a;
    border-top: 1px solid #333;
    display: flex;
    gap: 10px;
  }

  .connect-btn, .disconnect-btn {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.2s;
  }

  .connect-btn {
    background: #28a745;
    color: white;
  }

  .connect-btn:hover:not(:disabled) {
    background: #218838;
  }

  .disconnect-btn {
    background: #dc3545;
    color: white;
  }

  .disconnect-btn:hover:not(:disabled) {
    background: #c82333;
  }

  .connect-btn:disabled, .disconnect-btn:disabled {
    background: #6c757d;
    cursor: not-allowed;
  }
</style>

<script>
  interface SerialPort extends EventTarget {
    readable: ReadableStream;
    writable: WritableStream;
    open(options: { baudRate: number }): Promise<void>;
    close(): Promise<void>;
  }

  interface Navigator {
    serial: {
      requestPort(options?: { filters: Array<{ usbVendorId: number }> }): Promise<SerialPort>;
      getPorts(): Promise<SerialPort[]>;
    };
  }

  let Terminal: any;
  let term: any;
  let port: SerialPort | null = null;
  let portReader: ReadableStreamDefaultReader | null = null;
  let portWriter: WritableStreamDefaultWriter | null = null;
  let isConnected = false;
  let currentInput = '';
  let inputResolve: ((value: string) => void) | null = null;

  async function loadTerminal() {
    try {
      // Load CSS
      if (!document.querySelector('link[href*="xterm.css"]')) {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://cdn.jsdelivr.net/npm/xterm@5.3.0/css/xterm.css';
        document.head.appendChild(link);
      }

      // Dynamic import xterm
      const xtermModule = await import('xterm');
      Terminal = xtermModule.Terminal;

      return true;
    } catch (error) {
      console.error('Failed to load terminal:', error);
      return false;
    }
  }

  function initTerminal() {
    term = new Terminal({
      cols: 80,
      rows: 24,
      cursorBlink: true,
      theme: {
        background: "#000000",
        foreground: "#D0D0D0",
        cursor: "#D0D0D0",
      },
    });

    const terminalElement = document.getElementById("terminal");
    if (terminalElement) {
      term.open(terminalElement);
      term.writeln("üñ•Ô∏è  Arduino Serial Terminal");
      term.writeln("üì° Click 'Connect to Arduino' to start");
      term.writeln("");
    }

    // Handle keyboard input
    term.onData((data) => {
      if (!isConnected || !inputResolve) return;

      const char = data;
      
      if (char === '\r' || char === '\n') {
        // Enter key
        term.write('\r\n');
        const input = currentInput;
        currentInput = '';
        if (inputResolve) {
          inputResolve(input);
          inputResolve = null;
        }
      } else if (char === '\x7f' || char === '\b') {
        // Backspace
        if (currentInput.length > 0) {
          currentInput = currentInput.slice(0, -1);
          term.write('\b \b');
        }
      } else if (char.charCodeAt(0) >= 32) {
        // Printable character
        currentInput += char;
        term.write(char);
      }
    });
  }

  function readInput(): Promise<string> {
    return new Promise((resolve) => {
      inputResolve = resolve;
    });
  }

  async function startReadingPort() {
    if (!port || !port.readable) return;

    const textDecoder = new TextDecoder();
    try {
      portReader = port.readable.getReader();
      while (isConnected && portReader) {
        const { value, done } = await portReader.read();
        if (done) break;
        if (value) {
          const text = textDecoder.decode(value);
          term.write(text);
        }
      }
    } catch (error) {
      if (isConnected) {
        console.error("Read error:", error);
        term.writeln(`\r\n‚ùå Read error: ${error.message}`);
      }
    } finally {
      if (portReader) {
        try {
          portReader.releaseLock();
        } catch (e) {
          // Ignore if already released
        }
        portReader = null;
      }
    }
  }

  async function connectToArduino() {
    if (!navigator.serial) {
      term.writeln("\r\n‚ùå Web Serial API not supported in this browser.");
      term.writeln("Please use Chrome, Edge, or Opera browser.");
      return;
    }

    try {
      const connectBtn = document.getElementById("connectBtn") as HTMLButtonElement;
      const disconnectBtn = document.getElementById("disconnectBtn") as HTMLButtonElement;
      
      connectBtn.disabled = true;
      connectBtn.textContent = "üîÑ Connecting...";

      port = await navigator.serial.requestPort();
      
      await port.open({ baudRate: 9600 });
      isConnected = true;
      
      term.writeln("\r\n‚úÖ Connected to Arduino (9600 baud)");
      term.writeln("Type commands below (type 'exit' to disconnect):");
      term.write("> ");

      portWriter = port.writable.getWriter();
      startReadingPort();

      connectBtn.style.display = 'none';
      disconnectBtn.disabled = false;

      // Start command input loop
      startCommandLoop();
      
    } catch (err: any) {
      console.error("Serial connection error:", err);
      term.writeln(`\r\nüö´ Failed to connect: ${err.message}`);
      
      const connectBtn = document.getElementById("connectBtn") as HTMLButtonElement;
      connectBtn.disabled = false;
      connectBtn.textContent = "üîå Connect to Arduino";
    }
  }

  async function disconnectFromArduino() {
    isConnected = false;

    try {
      if (portWriter) {
        await portWriter.releaseLock();
        portWriter = null;
      }

      if (portReader) {
        await portReader.cancel();
        portReader = null;
      }

      if (port) {
        await port.close();
        port = null;
      }

      term.writeln("\r\nüîå Disconnected from Arduino");

      const connectBtn = document.getElementById("connectBtn") as HTMLButtonElement;
      const disconnectBtn = document.getElementById("disconnectBtn") as HTMLButtonElement;
      
      connectBtn.style.display = 'inline-block';
      connectBtn.disabled = false;
      connectBtn.textContent = "üîå Connect to Arduino";
      disconnectBtn.disabled = true;

      // Reset input state
      currentInput = '';
      inputResolve = null;

    } catch (error: any) {
      console.error("Disconnect error:", error);
      term.writeln(`\r\n‚ùå Disconnect error: ${error.message}`);
    }
  }

  async function startCommandLoop() {
    while (isConnected && port && portWriter) {
      try {
        const command = await readInput();
        
        if (!isConnected || !portWriter) break;
        
        if (command.trim().toLowerCase() === 'exit') {
          await disconnectFromArduino();
          break;
        }
        
        const data = new TextEncoder().encode(command + "\r\n");
        await portWriter.write(data);
        
        if (isConnected) {
          term.write("> ");
        }
        
      } catch (error: any) {
        if (isConnected) {
          console.error("Command error:", error);
          term.writeln(`\r\n‚ùå Command error: ${error.message}`);
        }
        break;
      }
    }
  }

  async function initialize() {
    const success = await loadTerminal();
    if (success) {
      initTerminal();
      
      const connectBtn = document.getElementById("connectBtn");
      const disconnectBtn = document.getElementById("disconnectBtn");
      
      if (connectBtn) {
        connectBtn.addEventListener("click", connectToArduino);
      }
      
      if (disconnectBtn) {
        disconnectBtn.addEventListener("click", disconnectFromArduino);
      }
    } else {
      const terminalElement = document.getElementById("terminal");
      if (terminalElement) {
        terminalElement.innerHTML = '<p style="color: red; padding: 20px;">‚ùå Failed to load terminal dependencies.</p>';
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }
</script>